# ‚úÖ ÏôÑÏÑ±Ìòï: ÏïàÏ†ï Í∏∞Î∞òÏóê Ï†ÑÏ≤¥ Í∏∞Îä• ÌÜµÌï© (ÏãúÍ∑∏ÎÑê Ï≤¥ÌÅ¨ + Î∞±ÌÖåÏä§Ìä∏ + Í∑∏Î¶¨ÎìúÏÑúÏπò)

import streamlit as st
import pandas as pd
import yfinance as yf
import datetime
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import itertools
from pykrx import stock


def get_mdd(asset_curve):
    peak = asset_curve.cummax()
    drawdown = (asset_curve - peak) / peak
    return drawdown.min() * 100


def get_krx_data(ticker, start_date, end_date):
    df = stock.get_etf_ohlcv_by_date(start_date.strftime("%Y%m%d"), end_date.strftime("%Y%m%d"), ticker)
    df = df[["Ï¢ÖÍ∞Ä"]].reset_index()
    df.columns = ["Date", "Close"]
    return df


def get_data(ticker, start_date, end_date):
    try:
        if ticker.lower().endswith(".ks") or ticker.isdigit():
            return get_krx_data(ticker, start_date, end_date)
        else:
            df = yf.download(ticker, start=start_date, end=end_date)

            # ‚úÖ MultiIndexÏùº Í≤ΩÏö∞ Î≥¥Ï†ï
            if isinstance(df.columns, pd.MultiIndex):
                if ("Close", ticker.upper()) in df.columns:
                    df = df[("Close", ticker.upper())]
                elif "Close" in df.columns.get_level_values(0):
                    df = df["Close"]
                df = df.to_frame(name="Close")
            elif isinstance(df, pd.Series):
                df = df.to_frame(name="Close")

            # ‚úÖ ÎßàÏßÄÎßâÏúºÎ°ú CloseÎßå ÎÇ®Í∏∞Í≥† Ï†ïÎ¶¨
            df = df[["Close"]].dropna().reset_index()
            return df
    except Exception as e:
        st.error(f"‚ùå Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®: {e}")
        return pd.DataFrame()


def check_signal_today(df, ma_buy, offset_ma_buy, ma_sell, offset_ma_sell,
                       offset_cl_buy, offset_cl_sell,
                       ma_compare_short=None, ma_compare_long=None,
                       offset_compare_short=1, offset_compare_long=1):

    df = df.copy()
    df = df.sort_values("Date").reset_index(drop=True)
    df["Close"] = pd.to_numeric(df["Close"], errors="coerce")
    df["MA_BUY"] = df["Close"].rolling(ma_buy).mean()
    df["MA_SELL"] = df["Close"].rolling(ma_sell).mean()

    if ma_compare_short and ma_compare_long:
        df["MA_SHORT"] = df["Close"].rolling(ma_compare_short).mean()
        df["MA_LONG"] = df["Close"].rolling(ma_compare_long).mean()

    i = -1
    try:
        cl_b = float(df["Close"].iloc[i - offset_cl_buy])
        ma_b = float(df["MA_BUY"].iloc[i - offset_ma_buy])
        cl_s = float(df["Close"].iloc[i - offset_cl_sell])
        ma_s = float(df["MA_SELL"].iloc[i - offset_ma_sell])
        ref_date = df["Date"].iloc[i].strftime('%Y-%m-%d')
    except Exception as e:
        st.warning(f"‚ùóÏò§Îäò ÏãúÍ∑∏ÎÑê ÌåêÎã®Ïóê ÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§: {e}")
        return

    st.subheader("üìå Ïò§Îäò ÏãúÍ∑∏ÎÑê ÌåêÎã®")
    st.write(f"üìÜ Í∏∞Ï§ÄÏùº: {ref_date}")

    trend_ok = True
    trend_msg = "ÎπÑÌôúÏÑ±Ìôî"
    if ma_compare_short and ma_compare_long:
        try:
            ma_short = float(df["MA_SHORT"].iloc[i - offset_compare_short])
            ma_long = float(df["MA_LONG"].iloc[i - offset_compare_long])
            trend_ok = ma_short >= ma_long
            trend_msg = f"{ma_short:.2f} vs {ma_long:.2f} ‚Üí {'ÌÜµÍ≥º ‚úÖ' if trend_ok else 'ÎØ∏ÌÜµÍ≥º ‚ùå'}"
        except:
            trend_msg = "‚ùóÎç∞Ïù¥ÌÑ∞ Î∂ÄÏ°±"
            trend_ok = False

    st.write(f"üìà Ï∂îÏÑ∏ Ï°∞Í±¥: {trend_msg}")

    buy_ok = cl_b > ma_b and trend_ok
    sell_ok = cl_s < ma_s

    st.write(f"üí° Îß§ÏàòÌåêÎã®: Ï¢ÖÍ∞Ä({cl_b:.2f}) {'>' if cl_b > ma_b else '<='} MA({ma_b:.2f}) ‚Üí {'Îß§ÏàòÏ°∞Í±¥ ‚úÖ' if buy_ok else 'Ï°∞Í±¥Î∂ÄÏ°± ‚ùå'}")
    st.write(f"üí° Îß§ÎèÑÌåêÎã®: Ï¢ÖÍ∞Ä({cl_s:.2f}) {'<' if cl_s < ma_s else '>='} MA({ma_s:.2f}) ‚Üí {'Îß§ÎèÑÏ°∞Í±¥ ‚úÖ' if sell_ok else 'Ï°∞Í±¥Î∂ÄÏ°± ‚ùå'}")

    if buy_ok:
        st.success("üìà Ïò§ÎäòÏùÄ Îß§Ïàò ÏãúÍ∑∏ÎÑêÏûÖÎãàÎã§!")
    elif sell_ok:
        st.error("üìâ Ïò§ÎäòÏùÄ Îß§ÎèÑ ÏãúÍ∑∏ÎÑêÏûÖÎãàÎã§!")
    else:
        st.info("‚è∏ Îß§Ïàò/Îß§ÎèÑ Ï°∞Í±¥ Î™®Îëê ÎßåÏ°±ÌïòÏßÄ ÏïäÏùå")

    last_buy_date = None
    last_sell_date = None

    for j in range(len(df) - max(offset_cl_buy, offset_ma_buy), 0, -1):
        try:
            cb = df["Close"].iloc[j - offset_cl_buy]
            mb = df["MA_BUY"].iloc[j - offset_ma_buy]
            cs = df["Close"].iloc[j - offset_cl_sell]
            ms = df["MA_SELL"].iloc[j - offset_ma_sell]

            trend_pass = True
            if ma_compare_short and ma_compare_long:
                ms_short = df["MA_SHORT"].iloc[j - offset_compare_short]
                ms_long = df["MA_LONG"].iloc[j - offset_compare_long]
                trend_pass = ms_short >= ms_long

            if last_buy_date is None and cb > mb and trend_pass:
                last_buy_date = df["Date"].iloc[j]
            if last_sell_date is None and cs < ms:
                last_sell_date = df["Date"].iloc[j]

            if last_buy_date and last_sell_date:
                break
        except:
            continue

    if last_buy_date:
        st.write(f"üóì ÎßàÏßÄÎßâ Îß§Ïàò Ï°∞Í±¥ ÎßåÏ°±: {last_buy_date.strftime('%Y-%m-%d')}")
    if last_sell_date:
        st.write(f"üóì ÎßàÏßÄÎßâ Îß§ÎèÑ Ï°∞Í±¥ ÎßåÏ°±: {last_sell_date.strftime('%Y-%m-%d')}")
    if not last_buy_date and not last_sell_date:
        st.warning("‚ùóÏµúÍ∑º Îß§Ïàò/Îß§ÎèÑ Ï°∞Í±¥Ïóê Î∂ÄÌï©Ìïú ÎÇ†Ïù¥ ÏóÜÏäµÎãàÎã§.")


# ‚úÖ UI Íµ¨ÏÑ±
st.set_page_config(page_title="Ï†ÑÎûµ Î∞±ÌÖåÏä§Ìä∏", layout="wide")
st.title("üìä Ï†ÑÎûµ Î∞±ÌÖåÏä§Ìä∏ ÏõπÏï±")

col1, col2 = st.columns(2)
with col1:
    signal_ticker = st.text_input("ÏãúÍ∑∏ÎÑê ÌåêÎã®Ïö© Ìã∞Ïª§", value="SOXL")
with col2:
    trade_ticker = st.text_input("Ïã§Ï†ú Îß§Îß§ Ìã∞Ïª§", value="SOXL")

col3, col4 = st.columns(2)
with col3:
    start_date = st.date_input("ÏãúÏûëÏùº", value=datetime.date(2021, 1, 1))
with col4:
    end_date = st.date_input("Ï¢ÖÎ£åÏùº", value=datetime.date.today())

with st.expander("üìà Ï†ÑÎûµ Ï°∞Í±¥ ÏÑ§Ï†ï"):
    st.markdown("## üîπ Îß§Ïàò Ï°∞Í±¥ ÏÑ§Î™Ö")
    st.markdown(
        """
        - `Îß§Ïàò Ï¢ÖÍ∞Ä Ï°∞Í±¥Ïùº` Ï†Ñ Ï¢ÖÍ∞ÄÍ∞Ä  
        - `Îß§Ïàò Ïù¥ÌèâÏÑ† Ï°∞Í±¥Ïùº' Ï†Ñ `Îß§Ïàò Ïù¥ÌèâÏÑ†`Ïùº Ïù¥ÎèôÌèâÍ∑†ÏÑ†Î≥¥Îã§ ÌÅ¨Í≥†  
        - ÎèôÏãúÏóê `Ï∂îÏÑ∏ ÏòõÎÇ† Ï°∞Í±¥Ïùº` Ï†Ñ `Ï∂îÏÑ∏ ÏòõÎÇ† Ïù¥ÌèâÏÑ†` Ïù¥ÎèôÌèâÍ∑†ÏÑ†Ïù¥  
        - `Ï∂îÏÑ∏ ÏµúÍ∑º Ï°∞Í±¥Ïùº` Ï†Ñ `Ï∂îÏÑ∏ ÏµúÍ∑º Ïù¥ÌèâÏÑ†` Ïù¥ÎèôÌèâÍ∑†ÏÑ†Î≥¥Îã§ ÌÅ¨Í±∞ÎÇò Í∞ôÏùÑ Îïå **Îß§Ïàò**
        """
    )
    st.markdown("## üîπÎß§ÎèÑ Ï°∞Í±¥ ÏÑ§Î™Ö")
    st.markdown(
        """
        - `Îß§ÎèÑ Ï¢ÖÍ∞Ä Ï°∞Í±¥Ïùº` Ï†Ñ Ï¢ÖÍ∞ÄÍ∞Ä  
        - `Îß§ÎèÑ Ïù¥ÌèâÏÑ† Ï°∞Í±¥Ïùº' Ï†Ñ `Îß§ÎèÑ Ïù¥ÌèâÏÑ†`Ïùº Ïù¥ÎèôÌèâÍ∑†ÏÑ†Î≥¥Îã§ ÌÅ¥ Îïå **Îß§ÎèÑ**
        """
    )
    ma_buy = st.number_input("Îß§Ïàò Ïù¥ÌèâÏÑ†", value=25)
    offset_ma_buy = st.number_input("Îß§Ïàò Ïù¥ÌèâÏÑ† Ï°∞Í±¥Ïùº", value=1)
    offset_cl_buy = st.number_input("Îß§Ïàò Ï¢ÖÍ∞Ä Ï°∞Í±¥Ïùº", value=25)

    ma_sell = st.number_input("Îß§ÎèÑ MA", value=25)
    offset_ma_sell = st.number_input("Îß§ÎèÑ MA Ïò§ÌîÑÏÖã", value=1)
    offset_cl_sell = st.number_input("Îß§ÎèÑ Ï¢ÖÍ∞Ä Ïò§ÌîÑÏÖã", value=1)

    ma_compare_short = st.number_input("Ï∂îÏÑ∏ ÏòõÎÇ† Ïù¥ÌèâÏÑ† (0=ÎπÑÌôúÏÑ±)", value=0)
    ma_compare_long = st.number_input("Ï∂îÏÑ∏ ÏµúÍ∑º Ïù¥ÌèâÏÑ† (0=ÎπÑÌôúÏÑ±)", value=0)
    offset_compare_short = st.number_input("Ï∂îÏÑ∏ ÏòõÎÇ† Ï°∞Í±¥Ïùº", value=1)
    offset_compare_long = st.number_input("Ï∂îÏÑ∏ ÏµúÍ∑º Ï°∞Í±¥Ïùº", value=1)

    stop_loss_pct = st.number_input("ÏÜêÏ†à Í∏∞Ï§Ä (%)", value=0.0, step=0.5, help="Ïòà: 10 ÏûÖÎ†• Ïãú -10% ÌïòÎùΩ Ïãú ÏÜêÏ†à")
    take_profit_pct = st.number_input("ÏùµÏ†à Í∏∞Ï§Ä (%)", value=0.0, step=0.5, help="Ïòà: 20 ÏûÖÎ†• Ïãú +20% ÏÉÅÏäπ Ïãú ÏùµÏ†à")

# ‚úÖ ÏãúÍ∑∏ÎÑê Ï≤¥ÌÅ¨
if st.button("üìå Ïò§Îäò ÏãúÍ∑∏ÎÑê Ï≤¥ÌÅ¨"):
    df_today = get_data(signal_ticker, start_date, end_date)
    if not df_today.empty:
        check_signal_today(df_today,
            ma_buy=ma_buy,
            offset_ma_buy=offset_ma_buy,
            ma_sell=ma_sell,
            offset_ma_sell=offset_ma_sell,
            offset_cl_buy=offset_cl_buy,
            offset_cl_sell=offset_cl_sell,
            ma_compare_short=ma_compare_short if ma_compare_short > 0 else None,
            ma_compare_long=ma_compare_long if ma_compare_long > 0 else None,
            offset_compare_short=offset_compare_short,
            offset_compare_long=offset_compare_long
        )


def backtest_strategy_with_ma_compare(signal_ticker, trade_ticker,
                                      ma_buy, offset_ma_buy, ma_sell, offset_ma_sell,
                                      offset_cl_buy, offset_cl_sell,
                                      ma_compare_short=None, ma_compare_long=None,
                                      offset_compare_short=1, offset_compare_long=1,
                                      initial_cash=5_000_000,
                                      start_date=None, end_date=None,
                                      min_days_between_trades=0,
                                      stop_loss_pct=0.0,                 
                                      take_profit_pct=0.0):            

    signal_df = get_data(signal_ticker, start_date, end_date)
    trade_df = get_data(trade_ticker, start_date, end_date)

    if signal_df.empty or trade_df.empty:
        st.warning("‚ùóÎç∞Ïù¥ÌÑ∞Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§.")
        return {}

    signal_df["MA_BUY"] = signal_df["Close"].rolling(ma_buy).mean()
    signal_df["MA_SELL"] = signal_df["Close"].rolling(ma_sell).mean()

    if ma_compare_short and ma_compare_long:
        signal_df["MA_SHORT"] = signal_df["Close"].rolling(ma_compare_short).mean()
        signal_df["MA_LONG"] = signal_df["Close"].rolling(ma_compare_long).mean()
    else:
        signal_df["MA_SHORT"] = signal_df["MA_LONG"] = None

    cash = initial_cash
    buy_price = None
    position = 0.0
    asset_curve = []
    logs = []

    for i in range(max(ma_buy, ma_sell,
                       offset_ma_buy, offset_ma_sell,
                       offset_cl_buy, offset_cl_sell,
                       offset_compare_short or 0, offset_compare_long or 0), len(signal_df)):

        cl_b = float(signal_df["Close"].iloc[i - offset_cl_buy])
        ma_b = float(signal_df["MA_BUY"].iloc[i - offset_ma_buy])
        cl_s = float(signal_df["Close"].iloc[i - offset_cl_sell])
        ma_s = float(signal_df["MA_SELL"].iloc[i - offset_ma_sell])
        close_today = float(trade_df["Close"].iloc[i])
        current_date = trade_df["Date"].iloc[i]

        trend_ok = True
        trend_desc = "ÎπÑÌôúÏÑ±Ìôî"
        if ma_compare_short and ma_compare_long:
            ma_short = signal_df["MA_SHORT"].iloc[i - offset_compare_short]
            ma_long = signal_df["MA_LONG"].iloc[i - offset_compare_long]
            trend_ok = ma_short >= ma_long
            trend_desc = f"{ma_short:.2f} vs {ma_long:.2f}"

        allow_trade = True
        if logs:
            last_trade_date = datetime.datetime.strptime(logs[-1]["ÎÇ†Ïßú"], "%Y-%m-%d")
            if (current_date - last_trade_date).days < min_days_between_trades:
                allow_trade = False

        signal = "HOLD"
        if position == 0 and cl_b > ma_b and trend_ok and allow_trade:
            position = cash / close_today
            cash = 0.0
            signal = "BUY"
            buy_price = close_today
        elif position > 0:
            profit_pct = (close_today - buy_price) / buy_price * 100 if buy_price else 0
            sell_condition = cl_s < ma_s
            stop_hit = stop_loss_pct > 0 and profit_pct <= -stop_loss_pct
            take_hit = take_profit_pct > 0 and profit_pct >= take_profit_pct

            if (sell_condition or stop_hit or take_hit) and allow_trade:
                cash = position * close_today
                position = 0.0
                signal = "SELL"
                buy_price = None

        total = cash + (position * close_today if position > 0 else 0)
        asset_curve.append(total)

        logs.append({
            "ÎÇ†Ïßú": current_date.strftime("%Y-%m-%d"),
            "Ï¢ÖÍ∞Ä": round(close_today, 2),
            "Ïã†Ìò∏": signal,
            "ÏûêÏÇ∞": round(total)
        })

    df = trade_df.iloc[-len(asset_curve):].copy()
    df["Asset"] = asset_curve
    mdd = get_mdd(df["Asset"])
    peak = df["Asset"].cummax()
    drawdown = df["Asset"] / peak - 1
    mdd_pos = drawdown.values.argmin()
    mdd_date = df["Date"].iloc[mdd_pos]

    recovery_date = None
    for i in range(mdd_pos, len(df)):
        if df["Asset"].iloc[i] >= peak.iloc[mdd_pos]:
            recovery_date = df["Date"].iloc[i]
            break

    trade_pairs = []
    current_buy = None
    for log in logs:
        if log["Ïã†Ìò∏"] == "BUY":
            current_buy = log
        elif log["Ïã†Ìò∏"] == "SELL" and current_buy:
            trade_pairs.append((current_buy, log))
            current_buy = None

    win_trades = sum(1 for buy, sell in trade_pairs if sell["Ï¢ÖÍ∞Ä"] > buy["Ï¢ÖÍ∞Ä"])
    total_trades = len(trade_pairs)
    win_rate = round((win_trades / total_trades) * 100, 2) if total_trades > 0 else 0

    return {
        "ÏµúÏ¢Ö ÏûêÏÇ∞": round(asset_curve[-1]),
        "ÏàòÏùµÎ•† (%)": round((asset_curve[-1] - initial_cash) / initial_cash * 100, 2),
        "MDD (%)": round(mdd, 2),
        "MDD Î∞úÏÉùÏùº": mdd_date.strftime("%Y-%m-%d"),
        "MDD ÌöåÎ≥µÏùº": recovery_date.strftime("%Y-%m-%d") if recovery_date else "ÎØ∏ÌöåÎ≥µ",
        "ÌöåÎ≥µ Í∏∞Í∞Ñ (Ïùº)": (recovery_date - mdd_date).days if recovery_date else None,
        "Ï¥ù Îß§Îß§ ÌöüÏàò": total_trades,
        "ÏäπÎ•† (%)": win_rate,
        "Îß§Îß§ Î°úÍ∑∏": logs
    }

# ‚úÖ UI Î≤ÑÌäº Î∞è ÏãúÍ∞ÅÌôî
if st.button("‚úÖ Î∞±ÌÖåÏä§Ìä∏ Ïã§Ìñâ"):
    result = backtest_strategy_with_ma_compare(
        signal_ticker=signal_ticker,
        trade_ticker=trade_ticker,
        ma_buy=ma_buy,
        offset_ma_buy=offset_ma_buy,
        ma_sell=ma_sell,
        offset_ma_sell=offset_ma_sell,
        offset_cl_buy=offset_cl_buy,
        offset_cl_sell=offset_cl_sell,
        ma_compare_short=ma_compare_short if ma_compare_short > 0 else None,
        ma_compare_long=ma_compare_long if ma_compare_long > 0 else None,
        offset_compare_short=offset_compare_short,
        offset_compare_long=offset_compare_long,
        start_date=start_date,
        end_date=end_date,
        stop_loss_pct=stop_loss_pct,
        take_profit_pct=take_profit_pct
    )

    if result:
        st.subheader("üìä Î∞±ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏöîÏïΩ")
        st.json({k: v for k, v in result.items() if k != "Îß§Îß§ Î°úÍ∑∏"})

        df_log = pd.DataFrame(result["Îß§Îß§ Î°úÍ∑∏"])
        df_log["ÎÇ†Ïßú"] = pd.to_datetime(df_log["ÎÇ†Ïßú"])
        df_log.set_index("ÎÇ†Ïßú", inplace=True)

        fig = go.Figure()
        fig.add_trace(go.Scatter(x=df_log.index, y=df_log["ÏûêÏÇ∞"], mode="lines", name="Asset", yaxis="y1"))
        fig.add_trace(go.Scatter(x=df_log.index, y=df_log["Ï¢ÖÍ∞Ä"], mode="lines", name="Price", yaxis="y2"))

        fig.update_layout(
            title="ÏûêÏÇ∞ & Ï¢ÖÍ∞Ä ÏãúÍ∞ÅÌôî",
            yaxis=dict(title="Asset"),
            yaxis2=dict(title="Price", overlaying="y", side="right"),
            hovermode="x unified",
            height=500
        )
        st.plotly_chart(fig, use_container_width=True)

        with st.expander("üßæ Îß§Îß§ Î°úÍ∑∏"):
            st.dataframe(df_log)

        # Îã§Ïö¥Î°úÎìú Î≤ÑÌäº
        csv = df_log.reset_index().to_csv(index=False).encode("utf-8-sig")
        st.download_button("‚¨áÔ∏è Î∞±ÌÖåÏä§Ìä∏ Í≤∞Í≥º Îã§Ïö¥Î°úÎìú (CSV)", data=csv, file_name="backtest_result.csv", mime="text/csv")
